services:

  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev" # leverage internal db for dev purpose
    extends:
      file: common-config.yml
      service: network-deploy-service

  accounts-db:
    container_name: accounts-db
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: accounts-db
    extends:
      file: common-config.yml
      service: microservice-db-config

  loans-db:
    container_name: loans-db
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: loans-db
    extends:
      file: common-config.yml
      service: microservice-db-config

  cards-db:
    container_name: cards-db
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: cards-db
    extends:
      file: common-config.yml
      service: microservice-db-config

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ] # need curl installed on image
      timeout: 5s
      retries: 20
    extends:
      file: common-config.yml
      service: microservice-base-config

  config-server:
    image: fdifrison/config-server:0.0.11
    container_name: config-server-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1" # need curl installed on image
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      SPRING_APPLICATION_NAME: "config-server"
      OTEL_SERVICE_NAME: "config-server"
    extends:
      file: common-config.yml
      service: microservice-base-config

  service-discovery-agent:
    image: fdifrison/service-discovery-agent:0.0.11
    container_name: service-discovery-agent-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1" # need curl installed on image
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      config-server:
        condition: "service_healthy"
    environment:
      SPRING_APPLICATION_NAME: "service-discovery-agent"
    extends:
      file: common-config.yml
      service: microservice-config-server-config

  accounts:
    image: fdifrison/accounts:0.0.11
    container_name: accounts-ms
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1" # need curl installed on image
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accounts-db:3306/accounts-db"
      OTEL_SERVICE_NAME: "accounts"
      SPRING_RABBITMQ_HOST: "rabbit"
    depends_on:
      accounts-db:
        condition: "service_healthy"
      service-discovery-agent:
        condition: "service_healthy"
      rabbit:
        condition: "service_healthy"
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  loans:
    image: fdifrison/loans:0.0.11
    container_name: loans-ms
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1" # need curl installed on image
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loans-db:3306/loans-db"
      OTEL_SERVICE_NAME: "loans"
    depends_on:
      loans-db:
        condition: "service_healthy"
      service-discovery-agent:
        condition: "service_healthy"
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  cards:
    image: fdifrison/cards:0.0.11
    container_name: cards-ms
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1" # need curl installed on image
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cards-db:3306/cards-db"
      OTEL_SERVICE_NAME: "cards"
    depends_on:
      cards-db:
        condition: "service_healthy"
      service-discovery-agent:
        condition: "service_healthy"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gateway-server:
    image: fdifrison/gateway-server:0.0.11
    container_name: gateway-server-ms
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: "gateway-server"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "gateway-server"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    depends_on:
      cards:
        condition: "service_healthy"
      loans:
        condition: "service_healthy"
      accounts:
        condition: "service_healthy"
      redis:
        condition: "service_healthy"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      fdifrisonNet:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observability/promtail/promtail-local-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasource/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 20s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  message:
    image: "fdifrison/message:0.0.11"
    container_name: message-ms
    depends_on:
      rabbit:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: "rabbit"
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  fdifrisonNet:
    driver: "bridge"